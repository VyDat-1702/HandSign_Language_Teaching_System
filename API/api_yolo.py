from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect
from websockets.exceptions import ConnectionClosed
from fastapi.templating import Jinja2Templates
import uvicorn
import asyncio
import cv2
import torch
from ultralytics import YOLO
import numpy as np
import websocket
# Khá»Ÿi táº¡o FastAPI
app = FastAPI()


device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model = YOLO("D:/install/AI/Code/Project/yolo/V8/Yolov8/runs/detect/train/weights/best.pt")
model.to(device)  # Cháº¡y trÃªn GPU


templates = Jinja2Templates(directory="templates")

@app.get('/')
def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})



@app.websocket("/ws")
async def get_stream(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            contents = await websocket.receive_bytes()
            arr = np.frombuffer(contents, np.uint8)
            frame = cv2.imdecode(arr, cv2.IMREAD_UNCHANGED)

            if frame is None:
                print("Lá»—i khi giáº£i mÃ£ áº£nh!")
                continue
            # Resize áº£nh trÆ°á»›c khi Ä‘Æ°a vÃ o model
            frame = cv2.resize(frame, (640, 480))

            # Dá»± Ä‘oÃ¡n
            results = model.predict(frame, device=device)
            frame = results[0].plot()
            # ðŸš€ Xá»­ lÃ½ YOLO (náº¿u cáº§n)
            # results = model.predict(frame, device=device)
            # frame = results[0].plot()  # Náº¿u YOLO, váº½ káº¿t quáº£ lÃªn frame

            # Encode áº£nh vÃ  gá»­i qua WebSocket
            _, buffer = cv2.imencode('.jpg', frame)
            await websocket.send_bytes(buffer.tobytes())

            # Giáº£m táº£i CPU/GPU
            await asyncio.sleep(0.02)

    except WebSocketDisconnect:
        print("Client disconnected")
if __name__ == '__main__':
    uvicorn.run(app, host='0.0.0.0', port=8001)